// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GameCondition {
  MINT
  LIKE_NEW
  GOOD
  FAIR
  POOR
}

enum ShippingOption {
  LOCAL_PICKUP
  NATIONAL_SHIPPING
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  listings      Listing[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token         String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Game {
  id                String    @id
  title             String
  yearPublished     Int?      @map("year_published")
  minPlayers        Int?      @map("min_players")
  maxPlayers        Int?      @map("max_players")
  playingTime       Int?      @map("playing_time")
  minPlayTime       Int?      @map("min_play_time")
  maxPlayTime       Int?      @map("max_play_time")
  minAge            Int?      @map("min_age")
  description       String?   @db.Text
  thumbnail         String?
  image             String?
  averageRating     Float?    @map("average_rating")
  usersRated        Int?      @map("users_rated")
  bggRank           Int?      @map("bgg_rank")
  primaryPublisher  String?   @map("primary_publisher")
  primaryDesigner   String?   @map("primary_designer")
  categories        String[]
  mechanics         String[]
  families          String[]
  expansions        String[]
  designers         String[]
  artists           String[]
  publishers        String[]
  
  listings          Listing[]
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@map("games")
}

model Listing {
  id             String        @id @default(cuid())
  gameId         String        @map("game_id")
  game           Game          @relation(fields: [gameId], references: [id])
  userId         String        @map("user_id")
  user           User          @relation(fields: [userId], references: [id])
  condition      GameCondition
  price          Float?
  isFree         Boolean       @default(false) @map("is_free")
  shippingOption ShippingOption @map("shipping_option")
  description    String?       @db.Text
  images         String[]
  isActive       Boolean       @default(true) @map("is_active")
  location       String?
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  @@map("listings")
}
