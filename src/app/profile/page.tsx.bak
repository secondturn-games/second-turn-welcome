'use client';

import { useEffect, useState } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { Button } from '../../components/ui/button';
import Link from 'next/link';
import { formatPrice } from '../../lib/utils';
import Image from 'next/image';
import { PageLoading } from '../../components/ui/loading';
import { ErrorBoundary } from '../../components/error-boundary';
import { Alert, AlertDescription, AlertTitle } from '../../components/ui/alert';
import { AlertCircle } from 'lucide-react';

interface Game {
  id: string;
  title: string;
  image: string | null;
  yearPublished?: number;
  minPlayers?: number;
  maxPlayers?: number;
  playingTime?: number;
  minAge?: number;
  description?: string;
  thumbnail?: string | null;
}

interface Listing {
  id: string;
  title: string;
  description: string | null;
  price: number | null;
  isFree: boolean;
  condition: string;
  isActive: boolean;
  game: Game;
  images: Array<{ id: string; url: string }>;
  createdAt: string;
  updatedAt: string;
}

interface UserProfile {
  id: string;
  name: string | null;
  email: string | null;
  image: string | null;
  createdAt: string;
  listings: Listing[];
}

export default function ProfilePage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [user, setUser] = useState<UserProfile | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    const fetchProfile = async () => {
      if (status === 'loading') return;
      
      if (!session?.user?.email) {
        router.push('/login');
        return;
      }

      try {
        setIsLoading(true);
        const response = await fetch(`/api/profile?email=${encodeURIComponent(session.user.email)}`);
        
        if (!response.ok) {
          throw new Error('Failed to fetch profile data');
        }
        
        const data = await response.json();
        setUser(data);
      } catch (err) {
        console.error('Error fetching profile:', err);
        setError(err instanceof Error ? err : new Error('An unknown error occurred'));
      } finally {
        setIsLoading(false);
      }
    };

    fetchProfile();
  }, [session, status, router]);

  if (status === 'loading' || isLoading) {
    return <PageLoading />;
  }

  if (error) {
    return (
      <div className="container mx-auto py-8 px-4">
        <div className="max-w-4xl mx-auto">
          <Alert variant="destructive">
            <div className="flex items-center gap-2">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
            </div>
            <AlertDescription className="mt-2">
              Failed to load profile. {error.message}
              <Button 
                variant="outline" 
                className="mt-2" 
                onClick={() => window.location.reload()}
              >
                Try Again
              </Button>
            </AlertDescription>
          </Alert>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="container mx-auto py-12 px-4">
        <div className="max-w-4xl mx-auto text-center">
          <h1 className="text-2xl font-bold mb-4">User not found</h1>
          <p className="text-gray-600 mb-4">We couldn't find your user account.</p>
          <Button asChild>
            <Link href="/">Return Home</Link>
          </Button>
        </div>
      </div>
    );
  }

  return (
    <ErrorBoundary 
      fallback={
        <div className="container mx-auto py-12 px-4">
          <div className="max-w-4xl mx-auto">
            <Alert variant="destructive">
              <div className="flex items-center gap-2">
                <AlertCircle className="h-4 w-4" />
                <AlertTitle>Something went wrong</AlertTitle>
              </div>
              <AlertDescription className="mt-2">
                An unexpected error occurred while rendering the profile page.
                <Button 
                  variant="outline" 
                  className="mt-2" 
                  onClick={() => window.location.reload()}
                >
                  Reload Page
                </Button>
              </AlertDescription>
            </Alert>
          </div>
        </div>
      }
    >
      <div className="container mx-auto py-8 px-4">
        <div className="max-w-4xl mx-auto">
          {/* Profile Header */}
          <div className="bg-white rounded-lg shadow p-6 mb-8">
            <div className="flex flex-col md:flex-row md:items-center md:justify-between">
              <div className="flex items-center space-x-4">
                <div className="relative h-20 w-20 rounded-full overflow-hidden bg-gray-100">
                  {user.image ? (
                    <Image
                      src={user.image}
                      alt={user.name || 'User avatar'}
                      fill
                      className="object-cover"
                    />
                  ) : (
                    <div className="h-full w-full bg-primary/10 flex items-center justify-center text-primary/50">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        className="h-10 w-10"
                      >
                        <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" />
                        <circle cx="12" cy="7" r="4" />
                      </svg>
                    </div>
                  )}
                </div>
                <div>
                  <h1 className="text-2xl font-bold">{user.name || 'Anonymous User'}</h1>
                  <p className="text-gray-600">{user.email || 'No email provided'}</p>
                  <p className="text-sm text-gray-500">
                    Member since {new Date(user.createdAt).toLocaleDateString(undefined, {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </p>
                </div>
              </div>
              <div className="mt-4 md:mt-0">
                <Button asChild variant="outline">
                  <Link href="/profile/edit">Edit Profile</Link>
                </Button>
              </div>
            </div>
          </div>

          {/* Listings Section */}
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-bold">My Listings</h2>
              <Button asChild>
                <Link href="/listings/new">+ New Listing</Link>
              </Button>
            </div>

            {user.listings.length === 0 ? (
              <div className="text-center py-12">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="h-12 w-12 mx-auto text-gray-400 mb-4"
                >
                  <path d="m21.44 11.05-9-9a1.5 1.5 0 0 0-1.06-.44H5.5A2.5 2.5 0 0 0 3 4.5v13.57c0 .26.25.51.5.5H9" />
                  <path d="M14 2v4.5c0 .83.67 1.5 1.5 1.5H20" />
                  <path d="M10.13 16.74c.3.2.7.2 1 0l1.87-1.25 1.87 1.25c.3.2.7.2 1 0l1.87-1.25 1.87 1.25c.3.2.7.2 1 0l1.62-1.08c.3-.2.3-.5 0-.7l-7.23-4.82a1 1 0 0 0-1.15 0l-7.23 4.82c-.3.2-.3.5 0 .7l1.62 1.08c.3.2.7.2 1 0l1.87-1.25 1.87 1.25z" />
                </svg>
                <h3 className="text-lg font-medium text-gray-900 mb-1">No listings yet</h3>
                <p className="text-gray-500 mb-4">Create your first listing to start selling or trading.</p>
                <Button asChild>
                  <Link href="/listings/new">Create a listing</Link>
                </Button>
              </div>
            ) : (
              <div className="space-y-4">
                {user.listings.map((listing) => (
                  <div
                    key={listing.id}
                    className="border rounded-lg p-4 hover:shadow-md transition-shadow"
                  >
                    <div className="flex flex-col sm:flex-row sm:items-center gap-4">
                      <div className="relative h-24 w-24 flex-shrink-0 rounded-md overflow-hidden bg-gray-100">
                        {listing.images && listing.images.length > 0 ? (
                          <Image
                            src={listing.images[0].url}
                            alt={listing.title}
                            fill
                            className="object-cover"
                          />
                        ) : (
                          <div className="h-full w-full bg-primary/10 flex items-center justify-center">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              width="24"
                              height="24"
                              viewBox="0 0 24 24"
                              fill="none"
                              stroke="currentColor"
                              strokeWidth="2"
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              className="h-8 w-8 text-primary/50"
                            >
                              <path d="m21.44 11.05-9-9a1.5 1.5 0 0 0-1.06-.44H5.5A2.5 2.5 0 0 0 3 4.5v13.57c0 .26.25.51.5.5H9" />
                              <path d="M14 2v4.5c0 .83.67 1.5 1.5 1.5H20" />
                              <path d="M10.13 16.74c.3.2.7.2 1 0l1.87-1.25 1.87 1.25c.3.2.7.2 1 0l1.87-1.25 1.87 1.25c.3.2.7.2 1 0l1.62-1.08c.3-.2.3-.5 0-.7l-7.23-4.82a1 1 0 0 0-1.15 0l-7.23 4.82c-.3.2-.3.5 0 .7l1.62 1.08c.3.2.7.2 1 0l1.87-1.25 1.87 1.25z" />
                            </svg>
                          </div>
                        )}
                      </div>
                      <div className="flex-1">
                        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
                          <div>
                            <h3 className="font-medium">{listing.title}</h3>
                            <p className="text-sm text-gray-500">
                              {listing.game.title}
                            </p>
                          </div>
                          <div className="font-medium">
                            {listing.isFree ? (
                              <span className="text-green-600">Free</span>
                            ) : (
                              <span>{formatPrice(listing.price || 0)}</span>
                            )}
                          </div>
                        </div>
                        <div className="mt-2 flex flex-wrap items-center gap-2 text-sm text-gray-500">
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                            {listing.condition}
                          </span>
                          <span>•</span>
                          <span>
                            Listed {new Date(listing.createdAt).toLocaleDateString()}
                          </span>
                        </div>
                      </div>
                      <div className="flex gap-2">
                        <Button variant="outline" size="sm" asChild>
                          <Link href={`/listings/${listing.id}/edit`}>Edit</Link>
                        </Button>
                        <Button variant="outline" size="sm" asChild>
                          <Link href={`/listings/${listing.id}`}>View</Link>
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Account Stats */}
          <div className="bg-white rounded-lg shadow p-6 mt-8">
            <h2 className="text-xl font-bold mb-4">Account Stats</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="border rounded-lg p-4 text-center">
                <div className="text-2xl font-bold">{user.listings.length}</div>
                <div className="text-sm text-gray-500">Active Listings</div>
              </div>
              <div className="border rounded-lg p-4 text-center">
                <div className="text-2xl font-bold">0</div>
                <div className="text-sm text-gray-500">Sold Items</div>
              </div>
              <div className="border rounded-lg p-4 text-center">
                <div className="text-2xl font-bold">0</div>
                <div className="text-sm text-gray-500">Positive Reviews</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </ErrorBoundary>
  );
}
